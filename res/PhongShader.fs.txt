//#version 120
#version 330

const int MAX_POINT_LIGHTS = 4; //Don't want it too high. Gets expensive if too many calcs
const int MAX_SPOT_LIGHTS = 4;

varying vec2 texCoord0;
varying vec3 normal0;
varying vec3 worldPos0;

struct BaseLight
{
	vec3 color;
	float intensity;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

struct Attenuation
{
	//How quickly point light fades off
	//Describe a quadratic equation
	float constant;
	float linear;
	float exponent;
};

struct PointLight
{
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

uniform vec3 baseColor;
uniform vec3 ambientLight;
uniform sampler2D diffuse;
uniform DirectionalLight directionalLight;

uniform float specularIntensity;
uniform float specularExponent;
uniform vec3 eyePos;

uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal)
{
	float diffuseFactor = dot(normal, -direction);
	
	vec4 diffuseColor = vec4(0,0,0,0);
	vec4 specularColor = vec4(0,0,0,0);
	
	//Check if has any affect on the surface
	if(diffuseFactor > 0)
	{
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
		
		//Add the specular reflection. Only >0 because can only relfect if thers light
		vec3 directionToEye = normalize(eyePos - worldPos0);
		vec3 reflectDirection = normalize(reflect(direction, normal));
		
		//Gives cosine between them. So 1 and then less and less
		float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularExponent);
		
		if(specularFactor > 0)
		{
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}
	
	return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal)
{
	vec3 lightDirection = worldPos0 - pointLight.position; //What direction light is in
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.range)
	{
		return vec4(0,0,0,0);
	}
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(pointLight.base, lightDirection, normal);
	
	float attenuation = pointLight.atten.constant + 
						pointLight.atten.linear * distanceToPoint +
						pointLight.atten.exponent * distanceToPoint * distanceToPoint
						+ 0.0001; //To preventing dividing by zero
						
	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 lightDirection = normalize(worldPos0 - spotLight.pointLight.position);
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	vec4 color = vec4(0,0,0,0);
	
	//Within cone
	if(spotFactor > spotLight.cutoff)
	{
		color = calcPointLight(spotLight.pointLight, normal) * (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));//Want it to fade off
	}
	
	return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal)
{
	return calcLight(directionalLight.base, -directionalLight.direction, normal);
}

void main()
{
	vec4 totalLight = vec4(ambientLight, 1);
		
	vec4 color = texture2D(diffuse, texCoord0) * vec4 (baseColor, 1);
	
	totalLight += calcDirectionalLight(directionalLight, normal0);
	
	//Because GLSL its better to use const for fro loop
	for(int i = 0; i < MAX_POINT_LIGHTS; i++)
	{
		if(pointLights[i].base.intensity > 0)
		{
			totalLight += calcPointLight(pointLights[i], normal0);
		}
	}
	for(int i = 0; i < MAX_SPOT_LIGHTS; i++)
	{
		if(spotLights[i].pointLight.base.intensity > 0)
		{
			totalLight += calcSpotLight(spotLights[i], normal0);
		}
	}
	 
	gl_FragColor = color * totalLight;
}