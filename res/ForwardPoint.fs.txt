#version 330

varying vec2 texCoord0;
varying vec3 normal0;
varying vec3 worldPos0;

struct BaseLight
{
	vec3 color;
	float intensity;
};

struct Attenuation
{
	//How quickly point light fades off
	//Describe a quadratic equation
	float constant;
	float linear;
	float exponent;
};

struct PointLight
{
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

uniform sampler2D diffuse;

uniform float specularIntensity;
uniform float specularExponent;
uniform vec3 eyePos;

uniform PointLight pointLight;

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal)
{
	float diffuseFactor = dot(normal, -direction);
	
	vec4 diffuseColor = vec4(0,0,0,0);
	vec4 specularColor = vec4(0,0,0,0);
	
	//Check if has any affect on the surface
	if(diffuseFactor > 0)
	{
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
		
		//Add the specular reflection. Only >0 because can only relfect if thers light
		vec3 directionToEye = normalize(eyePos - worldPos0);
		vec3 reflectDirection = normalize(reflect(direction, normal));
		
		//Gives cosine between them. So 1 and then less and less
		float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularExponent);
		
		if(specularFactor > 0)
		{
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}
	
	return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal)
{
	vec3 lightDirection = worldPos0 - pointLight.position; //What direction light is in
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.range)
	{
		return vec4(0,0,0,0);
	}
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(pointLight.base, lightDirection, normal);
	
	float attenuation = pointLight.atten.constant + 
						pointLight.atten.linear * distanceToPoint +
						pointLight.atten.exponent * distanceToPoint * distanceToPoint
						+ 0.0001; //To preventing dividing by zero
						
	return color / attenuation;
}

void main()
{
	vec4 tc = texture2D(diffuse, texCoord0);
	if(tc.a < 0.5)
	{
		discard;
	}

	vec4 totalLight = vec4(0, 0, 0, 1);
		
	vec4 color = texture2D(diffuse, texCoord0);
	
	if(pointLight.base.intensity > 0)
	{
		totalLight += calcPointLight(pointLight, normal0);
	}
	 
	gl_FragColor = color * totalLight;
}